version: '3.9'

services:
  mysql:
    container_name: 'mysql'
    restart: always
    image: mysql:8.0.33
    environment:
      MYSQL_ROOT_PASSWORD: '${MYSQL_ROOT_PASSWORD:-admin12345678@#}'
      MYSQL_USER: '${MYSQL_USER:-admin}'
      MYSQL_PASSWORD: '${MYSQL_PASSWORD:-admin12345678@#}'
      MYSQL_ROOT_HOST: '${MYSQL_ROOT_HOST:-%}'
    volumes:
      - ./mysql/data:/var/lib/mysql
      - ./mysql/my.cnf:/etc/mysql/my.cnf
      - ./mysql/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "3306:3306"
    deploy:
      resources:
        limits:
          cpus: '0.9'
          memory: '1024M'
    networks:
      - dev-network
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      retries: 3
      timeout: 5s
    logging:
      options:
        max-size: "10m"
        max-file: "3"

  pgsql:
    container_name: 'pgsql'
    restart: always
    image: postgis/postgis:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: '${PGSQL_EMAIL:-admin@mail.test}'
      POSTGRES_USER: '${PGSQL_USER:-admin}'
      POSTGRES_PASSWORD: ${PGSQL_PASSWORD:-my-strong-password}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-my-strong-password}
      POSTGRES_DB: 'postgres'
      POSTGRES_HOST: 'localhost'
    volumes:
      - ./pgsql/data:/var/lib/postgresql/data
      - ./pgsql/my-postgres.conf:/etc/postgresql/postgresql.conf
    ports:
      - "5432:5432"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: '512M'
    networks:
      - dev-network
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d postgres'" ]
      interval: 10s
      timeout: 3s
      retries: 3

  redis:
    container_name: 'redis'
    image: redis/redis-stack
    restart: always
    ports:
      - "6379:6379"
      - "8001:8001"
    volumes:
      - ./redis/data:/data
      - ./redis/redis.conf:/redis-stack.conf
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: '1024M'
    networks:
      - dev-network

  nginx:
    container_name: nginx
    image: nginx:alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes_from:
      - data
    depends_on:
      data:
        condition: service_healthy
      php82:
        condition: service_healthy
    networks:
      dev-network:
    links:
      - php82

  php82:
    container_name: php82
    build:
      context: ./php/8.2
      dockerfile: Dockerfile
    networks:
      - dev-network
    volumes_from:
      - data
    depends_on:
      data:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'php -v'" ]
      interval: 3s
      timeout: 3s
      retries: 10

  data:
    container_name: data
    build:
      context: ./data
      dockerfile: Dockerfile
    command: tail -f /dev/null
    volumes:
      #Projects
      - ./projects/:/var/www/

      #Ngix
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/snippets:/etc/nginx/snippets
      - ./nginx/logs:/var/log/nginx
      - ./nginx/certificates:/etc/nginx/certificates
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf

      #ZSH
      - ./zsh/.zshrc:/root/.zshrc
      - ./zsh/.p10k.zsh:/root/.p10k.zsh
      - ./zsh/.zsh_history:/root/.zsh_history
      - ./zsh/plugins:/opt/zsh/plugins
    networks:
      - dev-network
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'ls -la /var/www/dummy'" ]
      interval: 3s
      timeout: 3s
      retries: 10

networks:
  dev-network:
    driver: bridge
    name: dev-network
